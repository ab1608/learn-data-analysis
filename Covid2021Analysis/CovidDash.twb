<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20221.22.0516.1720                               -->
<workbook original-version='18.1' source-build='2022.1.2 (20221.22.0516.1720)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='GlobalCases' inline='true' name='federated.18wmq9l1a4bo1d10jizks1hcwqes' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='GlobalCases' name='semistructpassivestore-direct.1qlmyix0sf193d12ohd2l0ssiw4u'>
            <connection class='semistructpassivestore-direct' directory='/Users/abrahambriones/Library/CloudStorage/OneDrive-Personal/Documents/LearnDataAnalysis/SampleSQLProject1' filename='GlobalCases.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[GlobalCases.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='semistructpassivestore-direct.1qlmyix0sf193d12ohd2l0ssiw4u' name='GlobalCases.json' table='[GlobalCases.json]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='semistructpassivestore-direct.1qlmyix0sf193d12ohd2l0ssiw4u' name='GlobalCases.json' table='[GlobalCases.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[GlobalCases.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GlobalCases.json_630247750FEA4819A8EE81AD022C15EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>global_cases</remote-name>
            <remote-type>130</remote-type>
            <local-name>[global_cases]</local-name>
            <parent-name>[GlobalCases.json]</parent-name>
            <remote-alias>global_cases</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GlobalCases.json_630247750FEA4819A8EE81AD022C15EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>global_death_percentage</remote-name>
            <remote-type>130</remote-type>
            <local-name>[global_death_percentage]</local-name>
            <parent-name>[GlobalCases.json]</parent-name>
            <remote-alias>global_death_percentage</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GlobalCases.json_630247750FEA4819A8EE81AD022C15EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>global_deaths</remote-name>
            <remote-type>130</remote-type>
            <local-name>[global_deaths]</local-name>
            <parent-name>[GlobalCases.json]</parent-name>
            <remote-alias>global_deaths</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GlobalCases.json_630247750FEA4819A8EE81AD022C15EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='GlobalCases.json' datatype='table' name='[__tableau_internal_object_id__].[GlobalCases.json_630247750FEA4819A8EE81AD022C15EA]' role='measure' type='quantitative' />
      <column caption='Global Cases' datatype='integer' datatype-customized='true' name='[global_cases]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>global_cases</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Global Death Percentage' datatype='integer' datatype-customized='true' name='[global_death_percentage]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>global_death_percentage</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Global Deaths' datatype='integer' datatype-customized='true' name='[global_deaths]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>global_deaths</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.SchemaViewerObjectModel.false...folder name='Global Cases' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </_.fcp.SchemaViewerObjectModel.false...folder>
      <_.fcp.SchemaViewerObjectModel.true...folders-common>
        <folder name='Global Cases'>
          <folder-item name='[Document Index (generated)]' type='field' />
        </folder>
      </_.fcp.SchemaViewerObjectModel.true...folders-common>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='1' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='GlobalCases.json' id='GlobalCases.json_630247750FEA4819A8EE81AD022C15EA'>
            <properties context=''>
              <relation connection='semistructpassivestore-direct.1qlmyix0sf193d12ohd2l0ssiw4u' name='GlobalCases.json' table='[GlobalCases.json]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='VaccinationTable' inline='true' name='federated.03p15z51s8mtvr1g52x4904mxq6w' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='VaccinationTable' name='semistructpassivestore-direct.1p1g80c0ewjwr418okv020lqvbvj'>
            <connection class='semistructpassivestore-direct' directory='/Users/abrahambriones/Library/CloudStorage/OneDrive-Personal/Documents/LearnDataAnalysis/SampleSQLProject1' filename='VaccinationTable.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[VaccinationTable.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='semistructpassivestore-direct.1p1g80c0ewjwr418okv020lqvbvj' name='VaccinationTable.json' table='[VaccinationTable.json]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='semistructpassivestore-direct.1p1g80c0ewjwr418okv020lqvbvj' name='VaccinationTable.json' table='[VaccinationTable.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Continent</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cumulative_Vaccination_Rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cumulative_Vaccination_Rate]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Cumulative_Vaccination_Rate</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cumulative_Vaccinations</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cumulative_Vaccinations]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Cumulative_Vaccinations</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Location</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_Vaccinations</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New_Vaccinations]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>New_Vaccinations</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>Population</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_Date]</local-name>
            <parent-name>[VaccinationTable.json]</parent-name>
            <remote-alias>_Date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Continent]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Continent</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Cumulative Vaccination Rate' datatype='real' name='[Cumulative_Vaccination_Rate]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Cumulative_Vaccination_Rate</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Cumulative Vaccinations' datatype='real' name='[Cumulative_Vaccinations]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Cumulative_Vaccinations</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>Location</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='New Vaccinations' datatype='real' name='[New_Vaccinations]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>New_Vaccinations</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[Population]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Population</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='date' datatype-customized='true' name='[_Date]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>_Date</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='VaccinationTable.json' datatype='table' name='[__tableau_internal_object_id__].[VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222]' role='measure' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      <_.fcp.SchemaViewerObjectModel.false...folder name='Vaccination Table' role='dimensions'>
        <folder-item name='[Continent]' type='field' />
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Location]' type='field' />
        <folder-item name='[_Date]' type='field' />
      </_.fcp.SchemaViewerObjectModel.false...folder>
      <_.fcp.SchemaViewerObjectModel.true...folders-common>
        <folder name='Vaccination Table'>
          <folder-item name='[Continent]' type='field' />
          <folder-item name='[Document Index (generated)]' type='field' />
          <folder-item name='[Location]' type='field' />
          <folder-item name='[_Date]' type='field' />
        </folder>
      </_.fcp.SchemaViewerObjectModel.true...folders-common>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='VaccinationTable.json' id='VaccinationTable.json_F4E5D5CD5D664D99B7C1D5D1A9BFB222'>
            <properties context=''>
              <relation connection='semistructpassivestore-direct.1p1g80c0ewjwr418okv020lqvbvj' name='VaccinationTable.json' table='[VaccinationTable.json]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Top10Locations' inline='true' name='federated.0tkus9w0hcp2u00zrsg4r11fp2vd' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Top10Locations' name='semistructpassivestore-direct.09ll0gh0xgfjqh1fxz13w16gbrub'>
            <connection class='semistructpassivestore-direct' directory='/Users/abrahambriones/Library/CloudStorage/OneDrive-Personal/Documents/LearnDataAnalysis/SampleSQLProject1' filename='Top10Locations.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[Top10Locations.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='semistructpassivestore-direct.09ll0gh0xgfjqh1fxz13w16gbrub' name='Top10Locations.json' table='[Top10Locations.json]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='semistructpassivestore-direct.09ll0gh0xgfjqh1fxz13w16gbrub' name='Top10Locations.json' table='[Top10Locations.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[Top10Locations.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InfectionRate</remote-name>
            <remote-type>130</remote-type>
            <local-name>[InfectionRate]</local-name>
            <parent-name>[Top10Locations.json]</parent-name>
            <remote-alias>InfectionRate</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MaximumCases</remote-name>
            <remote-type>130</remote-type>
            <local-name>[MaximumCases]</local-name>
            <parent-name>[Top10Locations.json]</parent-name>
            <remote-alias>MaximumCases</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Top10Locations.json]</parent-name>
            <remote-alias>location</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[Top10Locations.json]</parent-name>
            <remote-alias>population</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Infection Rate' datatype='integer' datatype-customized='true' name='[InfectionRate]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>InfectionRate</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Maximum Cases' datatype='integer' datatype-customized='true' name='[MaximumCases]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>MaximumCases</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Top10Locations.json' datatype='table' name='[__tableau_internal_object_id__].[Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[location]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>location</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>population</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.SchemaViewerObjectModel.false...folder name='Top10Locations' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[InfectionRate]' type='field' />
        <folder-item name='[location]' type='field' />
      </_.fcp.SchemaViewerObjectModel.false...folder>
      <_.fcp.SchemaViewerObjectModel.true...folders-common>
        <folder name='Top10Locations'>
          <folder-item name='[Document Index (generated)]' type='field' />
          <folder-item name='[InfectionRate]' type='field' />
          <folder-item name='[location]' type='field' />
        </folder>
      </_.fcp.SchemaViewerObjectModel.true...folders-common>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Top10Locations.json' id='Top10Locations.json_7E2CBE8A6F4948609D8167C9DDD291B2'>
            <properties context=''>
              <relation connection='semistructpassivestore-direct.09ll0gh0xgfjqh1fxz13w16gbrub' name='Top10Locations.json' table='[Top10Locations.json]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Global Data&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GlobalCases' name='federated.18wmq9l1a4bo1d10jizks1hcwqes' />
          </datasources>
          <datasource-dependencies datasource='federated.18wmq9l1a4bo1d10jizks1hcwqes'>
            <column caption='Global Cases' datatype='integer' datatype-customized='true' name='[global_cases]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>global_cases</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Global Death Percentage' datatype='integer' datatype-customized='true' name='[global_death_percentage]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>global_death_percentage</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Global Deaths' datatype='integer' datatype-customized='true' name='[global_deaths]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>global_deaths</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[global_cases]' derivation='Sum' name='[sum:global_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[global_death_percentage]' derivation='Sum' name='[sum:global_death_percentage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[global_deaths]' derivation='Sum' name='[sum:global_deaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.18wmq9l1a4bo1d10jizks1hcwqes].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.18wmq9l1a4bo1d10jizks1hcwqes].[sum:global_cases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.18wmq9l1a4bo1d10jizks1hcwqes].[sum:global_death_percentage:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.18wmq9l1a4bo1d10jizks1hcwqes].[sum:global_deaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.18wmq9l1a4bo1d10jizks1hcwqes].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='line-pattern-only' scope='rows' value='solid' />
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' field='[federated.18wmq9l1a4bo1d10jizks1hcwqes].[:Measure Names]' value='42' />
            <format attr='width' value='213' />
            <format attr='color' value='#000000' />
            <format attr='text-format' field='[federated.18wmq9l1a4bo1d10jizks1hcwqes].[Multiple Values]' value='' />
            <format attr='text-format' field='[federated.18wmq9l1a4bo1d10jizks1hcwqes].[sum:global_death_percentage:qk]' value='n#,##0.00;-#,##0.00' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-pattern-only' value='solid' />
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
            <format attr='line-pattern-only' scope='cols' value='solid' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.18wmq9l1a4bo1d10jizks1hcwqes].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='right' />
                <format attr='text-orientation' value='0' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1.8790607452392578' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.18wmq9l1a4bo1d10jizks1hcwqes].[:Measure Names]</rows>
        <cols />
      </table>
      <simple-id uuid='{C1182314-ED7A-4DA9-9BA5-29282F65D7A2}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Top 10 countries with cases&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Top10Locations' name='federated.0tkus9w0hcp2u00zrsg4r11fp2vd' />
          </datasources>
          <datasource-dependencies datasource='federated.0tkus9w0hcp2u00zrsg4r11fp2vd'>
            <column caption='Maximum Cases' datatype='integer' datatype-customized='true' name='[MaximumCases]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>MaximumCases</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Country' datatype='string' name='[location]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>location</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>population</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[MaximumCases]' derivation='Sum' name='[sum:MaximumCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[population]' derivation='Sum' name='[sum:population:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[sum:population:qk]&quot;' user:op='manual' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:location:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[sum:MaximumCases:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:location:nk]' value='80' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#75a1c7' />
                <format attr='has-stroke' value='true' />
                <format attr='size' value='1.3513259887695312' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[sum:MaximumCases:qk]</rows>
        <cols>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{E5993148-83B4-40AC-8DB5-BEE4C04286C5}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run><![CDATA[<Total Vaccinations per Country>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='VaccinationTable' name='federated.03p15z51s8mtvr1g52x4904mxq6w' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.03p15z51s8mtvr1g52x4904mxq6w'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Location</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='New Vaccinations' datatype='real' name='[New_Vaccinations]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>New_Vaccinations</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[New_Vaccinations]' derivation='Sum' name='[sum:New_Vaccinations:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.03p15z51s8mtvr1g52x4904mxq6w].[Longitude (generated)]' field-type='quantitative' max='830363.65361685678' min='-16676275.217480026' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.03p15z51s8mtvr1g52x4904mxq6w].[Latitude (generated)]' field-type='quantitative' max='12572414.137481693' min='-11074339.696847077' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='outdoors' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]' />
              <lod column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[sum:New_Vaccinations:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.03p15z51s8mtvr1g52x4904mxq6w].[Latitude (generated)]</rows>
        <cols>[federated.03p15z51s8mtvr1g52x4904mxq6w].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{D22DED67-AAF3-42AB-A734-4F409F56D340}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Vaccinations per Country&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='VaccinationTable' name='federated.03p15z51s8mtvr1g52x4904mxq6w' />
          </datasources>
          <datasource-dependencies datasource='federated.03p15z51s8mtvr1g52x4904mxq6w'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Location</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='New Vaccinations' datatype='real' name='[New_Vaccinations]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>New_Vaccinations</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='date' datatype-customized='true' name='[_Date]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>_Date</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[New_Vaccinations]' derivation='Avg' name='[avg:New_Vaccinations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[_Date]' derivation='Month-Trunc' name='[tmn:_Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]' />
              <text column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]' />
              <text column='[federated.03p15z51s8mtvr1g52x4904mxq6w].[avg:New_Vaccinations:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.03p15z51s8mtvr1g52x4904mxq6w].[avg:New_Vaccinations:qk]</rows>
        <cols>[federated.03p15z51s8mtvr1g52x4904mxq6w].[tmn:_Date:qk]</cols>
      </table>
      <simple-id uuid='{4B5746E0-D160-4DE8-BB34-8805DCF226C9}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='53977' id='3' name='Sheet 1' w='49194' x='806' y='618'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='44787' id='5' name='Sheet 2' w='49194' x='50000' y='54595'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='44787' id='7' name='Sheet 4' w='49194' x='806' y='54595'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='53977' id='6' name='Sheet 3' w='49194' x='50000' y='618'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1200' minheight='1200' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='9' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98764' id='8' param='vert' type-v2='layout-flow' w='98388' x='806' y='618'>
                <zone fixed-size='280' h='53977' id='3' is-fixed='true' name='Sheet 1' w='49194' x='806' y='618'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='53977' id='6' is-fixed='true' name='Sheet 3' w='49194' x='50000' y='618'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='44787' id='7' is-fixed='true' name='Sheet 4' w='49194' x='806' y='54595'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='44787' id='5' is-fixed='true' name='Sheet 2' w='49194' x='50000' y='54595'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{C5BC347F-2FCB-4EC4-B992-BAE104CB1139}' />
    </dashboard>
  </dashboards>
  <windows source-height='72'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.18wmq9l1a4bo1d10jizks1hcwqes].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8E0C8B55-E614-4BD1-87C9-95C3AD4CE397}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:InfectionRate:nk]</field>
            <field>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:MaximumCases:nk]</field>
            <field>[federated.0tkus9w0hcp2u00zrsg4r11fp2vd].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5C3F158F-0040-4147-B7C6-2DDED0D0C78A}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='251'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]</field>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[sum:New_Vaccinations:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{46224A3B-39B8-40AA-A43B-6D13DDC16B2A}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:Location:nk]</field>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[none:_Date:nk]</field>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[sum:New_Vaccinations:qk]</field>
            <field>[federated.03p15z51s8mtvr1g52x4904mxq6w].[yr:_Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3E8B6595-488C-414C-AF96-41BFEA53B37D}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1' />
        <viewpoint name='Sheet 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 4'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='5' />
      <simple-id uuid='{2682935E-B278-4495-A32D-BC38045E7182}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='130' name='Sheet 1' width='192'>
      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
      UwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      i4ueHYEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAATzklEQVR4nO3daXAb53kH8D9OHjgpEARPUZJJ2ZREiiIlURQlSyJ1J64T13bHR9t02sbT
      up06tmu3HTeTmcx0Molje5ykbdpJbTex6ytObcd1x5JI6pZp3pdE0QIlAgRvggC4uHe3HySi
      VghSIAlggcXz+6IZkQAekvvHYt/3ffaV8DzPg5AUJRW6AEKEFPUAsCwb7ackJGboDEBSGgWA
      pDQKAElpcqELICQWrFYrJBIJ8vLyIJVKMTMzA47jkJ2dDQAIBoOw2WwUACJOFosFMpkMbW1t
      SEtLQ2ZmJsxmMxiGgUajgUajQVFREQWAiJPf7wfDMCgtLQ39XyAQgMfjQX5+PiwWCzQaDSTR
      nghjWRYymSyaT0lIzNAZgIia3+9HZ2cnqqurMTExgUAggGAwCI1GA7vdTgEg4sayLDweDxwO
      B9rb28EwDBQKBfx+P+x2Ow2DEnEbGRmB1WqFy+VCSUkJpFIpioqKoNFoYDKZIrsGCAaDsFgs
      KCgowMTEBAwGA1wuFxQKBWQyGRQKBTiOg0qlomsAkpDGxsaQnZ0NqVQKlmUhl8vBsmxkAeA4
      Dr29vfD5fMjPz8fk5CTUajUAgOd5WCwWlJeXw2Aw3HxSiSTmPxAh0RDRNYDf74dSqQTDMBgf
      H0daWtptZ4CcnBw4nU4YjUbwPE9nAJI0IjoD8DwPjuMglUrB8zwkEgnmHyaRSG57x6ePQCRZ
      vNvRFtkZQCKRhA7q+YOdPuaQZHb6y0EMTU/TKBBJPb2jNpwYuIzv7K+nAJDUYp214z9bLuG5
      hkNQyuUUAJI67G4GrzQ34ukDDdCmZwCgfgCSInzBIH7UeBJ/XrsHuVpd6P8pAET0ghyHl5pO
      4r4t5bjbZLrtaxQAInq/uHQeZaY87Cpev+BrFAAiah90dUAmkeL+8oqwQ/cUACJa583XMDAx
      gW/V1C46b0UBIKLUPzaKT/p78fSBesilix/mFAAiOiOOWfzH5xfxt/WHkCZXLPm9FAAiKrNu
      N15pbsRT+w4gKzPzjt9PASCicXOs/wT+eOcuFOqzInpMRIvhAoEAhoaGoFKpwDAMsrKyQq1l
      MpkMSqUSLMvCaDSu6gcgZKU4jsOrp5twtGwztuTlR/y4iAIgl8shkUjgdDoxNTUFjuOgUCjA
      six4nsfg4CDq6urAcRw4jgPdcZ3E2xtffI51WWtQW7wOwWAw4sdFFACPxwOXywW9Xg+DwQC5
      XA6fzxc6A5SXl8Nut0Or1VJDDIm7j3t7EOQ5PLitatnL9Om+QCSpXbo+hMbBATxXfwjyFRx3
      dBFMktbViXF82NOF7+xvWNHBD1AASJIaczrxbxfO4dn6g8hQLD3WvxQKAEk6Tq8HLzWfwl/f
      ux8GlXpVz0UBIEnFHwzixcaTeKx6B4rXGFb9fBQAkjQ4jsNPzjRjf+lGbC0ojMpzUgBI0vhl
      awsK9XocKNkYteekAJCk8D/9vXD5vHhoW3VUb8lDASAJ74vh62izDOOJ3XshjfL9qCgAJKFd
      m5rE+50deObAQShiMMFKASAJa8Llwr+cP4tn6w8hU6mMyWtQAEhCmvP58FLzKTy5514Y1asb
      618KBYAknADL4sdNJ/FwZRXWG7Jj+loUAJJQeJ7HP587g93rN6CqaG3MXy/ihhiz2QypVAqJ
      RIK0tDTMzc2FlkPL5TefpqioKKbFEvF7q+0LGFQqHNx4T1xeL6IAyGQy+Hw+SKVScBwHt9sN
      lUoF4Oby54GBAdTW1lJDDFmVU1cHMDHnwpN194Jl2bi8ZkQB8Pl8UCqVyMnJwcTEBLKysuB2
      u6FQKCCXy1FTUwOfzwedTkcNMWRF2q0WXLwxhH84dBRKefw2L6WGGCK4oekp/Ov5s3jhyDFo
      0tLj+tp0EUwENTU3h5+dPY2nDzTE/eAHKABEQIzfhxebTuKJur0wabSC1EABIIIIsCxeajqF
      ByoqUWrMEawOCgCJO57n8fMLZ7G9qBg7i9cJWgsFgMTde53t0KSl42jZJqFLoQCQ+GoevArr
      7Cwe374zIbbapQCQuOm2jaBp8Cqe3LsPsiVuWR5PiVEFEb1h+wzebG3BM/UHkRbHia47oQCQ
      mJthGLx6pglP7auHNj3+Y/1LoQCQmPIE/Hix6ST+dFcd8nS6Oz8gzigAJGaCLItXmhvx9c3l
      KDPlCl1OWBQAEhM8z+MXly5gU24edq/fIHQ5i4r4aoTjOEil0tBS5/l/JRJJQgxnkcRyznwN
      APB7WyoErmRpETfEXLlyBVlZWbhy5QrWrVuHubk5yOVyyGQy+P1+6PV6FBcXx7pekgS8gQA+
      7uvBPx45lvBvjhGfASQSCViWhUKhgM/nCzXEAMDk5CRMJhM1xBAAwMe93dh3VwkyZPJl7dYi
      hIgCwPM8MjMzkZOTg5ycmwuXnE5nqCGmsLAQLMuGPiJRP0DqsrvdaLUM4/vH7wu1yiYyaogh
      UfXvF89ha36h4IvcIkWjQCRqLHY7bA4Htq9NnmtBCgCJCp7n8WZbCx6p2h71+3fGEgWAREXP
      qA0ZCiU25piELmVZKABk1YIci3c72vBI1XahS1k2CgBZtXPXrmFjjgk5Go3QpSwbBYCsiicQ
      wKeX+/BARaXQpawIBYCsym/7erC/dCPUaWlCl7IiFACyYna3G+2W4bjdxzMWKABkxd5ub8U3
      KypjsnNLvFAAyIrcmJnBFDOHHUk06RUOBYAsG8fzeKvtCzxavSPhV3veCQWALFuPbQQqpRJ3
      ZRuFLmXVIlqux3Ecbty4gdzcXIyPj8NkMsHlcoU2yFAoFOA47rYl0kScgiyL9zrb8dS+eqFL
      iYqIAyCXyzE9PQ2PxwOz2Yy0W8NePM/DYrGgvLwcGRkZ1A8gcs3XBnG3MQf69PSEX+sfiYgC
      4Pf7YTabkZ+fD4/Hg8zMzNvOADk5OXA6nTAajdQPIGKegB8nBq7gu0ePJ8Va/0isqB+A5/lF
      e4KpH0C83m5vxZpMFQ7fUyZ0KVGzootgiUQCqVQa2jSPiN80w6BrxIr60o1ClxJVNApEIvJO
      RxserKyCXGRndwoAuaPr09OYYRhUFYpvG1wKAFnSfKfXYwlyO/NoowCQJXWOWKHLyMB6g0Ho
      UmKCAkAWFbg16fVI1Q6hS4kZCgBZVNPgVVTkF8Ag4hl+CgAJy+3348TAZdyf4Pf2XC0KAAnr
      w54uHC3bhAylUuhSYooCQBaYnJtDt20E+0rENekVDgWALPB2eyse3lYNeYJsZBdL4v8JybIM
      TU/B5fNimwgnvcKhAJAQjufxyy9a8Fi1eIc9f1fEG2QMDQ1Bp9NhdnYW2dnZty2HViqVYFkW
      RmPydwilsg6rBUa1GsVrxDnpFU5EAZDL5ZBIJBgdHUVhYSGGh4eh1WrBsix4nsfg4CDq6upo
      g4wkFuQ4vNvRhmcPNIii0SVSEQXA4/HA5XLBaDRiZGQEa9asAcMwoTNAeXk57HY7tFotNcQk
      qZOX+7C9qBhGjVboUuKKNsggYPw+fO/TT/D94/chXaEQupy4ootggt90d+FY2eaUO/gBCkDK
      m5ybw5XxMewvKRW6FEFQAFIYz/N4s7UFD1VWQZoCk17hpOZPTQAA16an4A74sbWgUOhSBEMB
      SFEcz+Ot1hb80Y4aoUsRFAUgRbUO34BRrUGhPkvoUgRFAUhBQZbFr7s68EgKLXlYDAUgBX02
      cBk1xeugz8gQuhTBUQBSzJzPh6bBq/ja5nKhS0kIFIAU80FXB76+uRxpIrm352pRAFLIhMuF
      gYlx7N1wl9ClJAwKQIqYv8HVo9t3puykVzj0m0gRg5MT8AaC2JybJ3QpCSWiD4Isy6K/vx9G
      oxGTk5NQq9Xwer2h5dDz94ovKkqNNrpkw/E8/qu9FX+2q07oUhJORAGQyWRQqVQIBAJwOp2Q
      SqVIT08HcDMcAwMDqK2tpYaYBNUyfAN5Wi1ManVKNbtEIuKWSJ/Ph/T0dBiNRuh0OrjdbigU
      CsjlctTU1MDn80Gn01FDTIIJsCx+09OFFw4fE82uLtFEDTEi90lfDwIch2+UbxW6lIREF8Ei
      5vJ6cfrLQRwr2yx0KQmLAiBi73d14L4tFTTptQQKgEiNOZ34cnISdTTptSQKgAjNT3o9vmMn
      pCLc1SWaKAAiNDAxDo7nUWbKFbqUhEcBEBmO5/Gr1hY8Xr1T6FKSQtgAjI2N4dy5c+A4Lt71
      kFX6/PoQNhiykafTCV1KUlg0AMFgkAKQZPzBID7o7sRDlVVCl5I0wgZgdnYWCoWCVg0mmU8v
      92HPhrugubVMhdxZ2CNcr9fDarXGuxayCk6vF+fN13B80xahS0kqYQMwNTUFlUoFlmXjXQ9Z
      oXc72vCNikooaBnKsiwIwNzcHHQ6HRiGoTU9ScLmcOCGfQa71q0XupSksyAAKpUKKpUKW7Zs
      ue0MML9mbn5PAFr6nBj4W8Oef7idJr1WIuwikaGhIQQCAWzatAnAzYO+vb0dBQUFGBsbg0aj
      AcMwkMvlkMlk8Pv90Ov1KC4ujmvxBGi3WiCTSrAxxyR0KUlpQQAkEgk0Gg06OzsRDAZDXV8G
      gwEMw0ClUsHhcED3lXHmyclJmEwmOivEmXl6Cu90tOKFQ0ep0WWFwp4BDAYDNm/eHLoGCAQC
      kEgkyMvLw/T0NNauXQun0xlqiCksLATLspBKpdQQEyf+YBC/amvF8w1HoM3IFLqcpBU2AA6H
      AxlfuWuYQqHA+vU3L7DUajUA3PZ1El8sx+Hl5kY8UrUdBpVK6HKS2qKjQCQx8TyP11suYUN2
      NspyabHbai04A6jVaszOziIYDNJn+QTD8zw+7OlGgA3ScocoCTsRZjKZoNWm1m6ByeCs+Utc
      mRjDt3fvFboU0QgbAJZl4XA4aC1QAumx2XDiyhU8tb+exvujKOwRPjIygpaWFhpaSxDD9hm8
      3nIRzx88hHR56u3kGEsLrgGCwSCKi4vh9XrpPjIJwGKfwc8vnMPzDYehTqNVntG24AzAcRxs
      Nhu8Xi8thhPYjZkZvHK6CX938DByNBqhyxGlBTfGmj/oVzqZRTfGio6puTn808n/xfMNh2HS
      0IBErCw4A8hkMnR3d+P111+njjCBMH4ffnjqMzy5Zx8d/DEW9iKYRn+EE2RZ/ODkZ3i0eifu
      yjYKXY7ohT3S/X4/7rnnnnjXkvI4nsfLpxtRX3o3KgtTd/PqeFr0DNDX10czwXH2RstFrMsy
      4EDpRqFLSRkLxjm9Xi+8Xi84joPk1oQLy7Iwm80oKSmB2WyGXq+Hy+UKLZVWKpVgWRZGI52y
      V+qjnm54AgF8a2et0KWklLDzABcvXsTWrf9/O22pVAqZTIbJyUmMjY2B4zhIpdJQd9jg4CDq
      6uqoH2CFLlw3o9tmxfP1h2joOc4i2h8gEAigt7cXhYWFGB0dhUajgcfjWXAGKC4upmHQZeod
      teHN1hZ879jXkEazvHG3aABsNhtyc3OXPSJEAYjcsH0Gr55pxnePHIeW7uUjiLBrHU6cOAGb
      zYaSkhLU1dHGarEwzTB4ubkRf3/wCB38Agr79q7RaFBSUhJqiifRxfhuTnT91d59tMRBYGED
      kJ2djf7+/lD7I4meIMviB6c+wx9sq6aJrgSwIAAsy8Jut6OgoIA+y0cZx/N45XQj9peUoqpo
      rdDlEIQJgNvthsPhgMPhCM0DkOh47fMLWJu1BvWldwtdCrll0VGg+Ymw5YaARoHC+21vD4Zn
      7fiLur30xpJAFh3jlEql9IeKkvPma+geHcETu/fQ7zTB0LLPGOsbHcUn/b149sBByGiVbcKh
      v0gMWex2vNFyEc81HIKS2ksTEgUgRmYYBi81n8Iz9Qehp1sXJiwKQAzM3Zro+ss991JHV4Kj
      AERZgGXxo8YTeLCyCqXGHKHLIXdAAYgijufxkzPN2LuhBNvX0l4JySCiK7P5hpi8vDxYrVas
      WbMGbrebGmJ+xxstl1Co16NhI010JYuIAjDfEKNSqeD3+zE7OwuZTEYNMV/x6eV+MD4fHq/e
      QU0tSWRZDTFqtRo8z0OpVIY9A6RqQ8z5oWs4/eUgnms4DDmN9SeViAKwHKkWgL7RUbzZ1oLv
      HjmOdAV1dCUbertahWH7DF67NdFFB39yogCs0AzD4NUzTXjmQANNdCUxCsAKMH4/fth4Ak/s
      3os8LW0nlcwoAMsUYFn8uOkkHty6jSa6RIACsAw8z+Nn505jV/E6mugSCQrAMrzRcgm5Gi0O
      3V0mdCkkSigAEfq4txuM34+Ht1VTU4uIUAAicHHIjG6bDd/evYc2qBMZCsAdXB4bxcd9PXjm
      QAMUKTTBlyooAEsYts/gtc8v4rmGwzTRJVIUgEW4fF789Oxp/M2+eugzMoQuh8QIBWAR/93d
      hfu3VKBArxe6FBJDFIAwHB4PLo+PoWbdeqFLITEWcUNMf38/8vLyMDo6Cq1We9ty6PkNtYuK
      imJabLx81NuN45u20NLmFBBRAOabYRwOB3Jzc2G1WqHV3mz2ZlkWAwMDqK2tFUVDzIzbjd5R
      Gx7eug3BYFDockiMRRSAQCAAn88Ho9GIyclJrF27Fk6nEwqFAnK5HDU1NfD5fNDpdOB5Pqn7
      AT7q68GDlVVIUyqFLoXEQUQBUCgUKCu7Of2fnZ0NADAYDLGrSiAzDIPrM9P4kxraqC5V0Ifc
      r3ivsx33l2+lWximEPpL3zLucsLmdKCqUBwX8iQyFIBbft3ViQcqKundP8XQXxs33/0nXE6U
      5xcIXQqJMwoAgHfa2/DNikpa6ZmCUj4A1lk7nD4vKujdPyWlfADe7+rA72/dRk0uKer/AI9o
      qO3iUGbMAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
